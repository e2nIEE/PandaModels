var documenterSearchIndex = {"docs":
[{"location":"quickguide/#Quick-Start-Guide","page":"Getting Started","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"In python, for any net in pandapower or SimBench format, simply by calling pandapower.runpm function you are able to solve wide range of available OPF models, approximations and relaxations, from PowerModels.jl.","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"runpm(net, julia_file=None, pp_to_pm_callback=None, calculate_voltage_angles=True,\n          trafo_model=\"t\", delta=1e-8, trafo3w_losses=\"hv\", check_connectivity=True,\n          correct_pm_network_data=True, pm_model=\"ACPPowerModel\", pm_solver=\"ipopt\",\n          pm_mip_solver=\"cbc\", pm_nl_solver=\"ipopt\", pm_time_limits=None, pm_log_level=0,\n          delete_buffer_file=True, pm_file_path = None, opf_flow_lim=\"S\", pm_tol=1e-8,\n          pdm_dev_mode=False, **kwargs)","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"For example to run semi-definite relaxation of AC-OPF with :","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"import pandapower as pp\nimport pandapower.networks as nw\n\nnet = nw.example_simple()\npp.runpm(net, pm_model=\"SDPWRMPowerModel\", pm_solver=\"ipopt\", pm_nl_solver=\"juniper\")","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"exact non-convex model linear approximations quadratic approximations quadratic relaxations sdp relaxations\nACPPowerModel DCPPowerModel DCPLLPowerModel SOCWRPowerModel SDPWRMPowerModel\nACRPowerModel DCMPPowerModel LPACCPowerModel SOCWRConicPowerModel SparseSDPWRMPowerModel\nACTPowerModel BFAPowerModel  SOCBFPowerModel \nIVRPowerModel NFAPowerModel  SOCBFConicPowerModel \n   QCRMPowerModel \n   QCLSPowerModel ","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Different solver options are available in PandaModels. For more information please check the supported solvers by JuMP.jl in here.","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"solvers support license\nJuniper (MI)SOCP, (MI)NLP MIT\nIpopt LP, QP, NLP EPL\nCbc (MI)LP EPL\nGurobi (MI)LP, (MI)SOCP Comm.","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"For DC and AC OPF, you can directly call pandapower.runpm_dc_opf and pandapower.runpm_ac_opf, respectively.","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"For example:","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"import pandapower as pp\nimport pandapower.networks as nw\n\nnet = nw.example_simple()\npp.runpm_ac_opf(net)","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"for more  details about the settings please see here, also the detailed tutorial is available in Tutorials.","category":"page"},{"location":"version/#Update-Version","page":"Register New Tag","title":"Update Version","text":"","category":"section"},{"location":"version/","page":"Register New Tag","title":"Register New Tag","text":"After implementing, testing, and providing the tutorial documentation for the new model, to call the model from pandapower, you might register your new features to the global version of the PandaModels. The reason is that when the (non-developer) pandapower users run optimization models, indeed, they call the models from the registered version of PandaModels.","category":"page"},{"location":"version/","page":"Register New Tag","title":"Register New Tag","text":"In this case, you need to change the version in Project.toml then push your changes to the develop branch, otherwise, the documentation actions will not pass. After all required actions pass, make a pull request to the main branch and create a new issue, and comment @JuliaRegistrator register. For more information please check Julia Registrator.","category":"page"},{"location":"version/","page":"Register New Tag","title":"Register New Tag","text":"warning: pandapower Development\nonly after updating the PandaModels version, you are able to create a pull request in pandapower otherwise the tests related to your new optimization model will be failed.","category":"page"},{"location":"develop/#Developer-Documentation","page":"Develop Mode","title":"Developer Documentation","text":"","category":"section"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"warning: sync develop mode in pandapower\nEither you are developing a new feature or using the function from develop mode you should set the  option  pdm_dev_mode=True, e.g. :pp.runpm_vd(net, calculate_voltage_angles=True,\n        trafo_model=\"t\", delta=1e-8, trafo3w_losses=\"hv\", check_connectivity=True,\n        n_timesteps=96, time_elapsed=0.25, correct_pm_network_data=True,\n        pm_model=\"ACPPowerModel\", pm_time_limits=None, pm_log_level=0,\n        delete_buffer_file=False, pm_file_path=None,\n        pm_tol=1e-8, pdm_dev_mode=True)this option automatically check the setting and activate the develop mode environment.","category":"page"},{"location":"develop/#Develop-Mode","page":"Develop Mode","title":"Develop Mode","text":"","category":"section"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"To install and develop PandaModels you can use either Git Bash or Python:","category":"page"},{"location":"develop/#Git-Bash:","page":"Develop Mode","title":"Git Bash:","text":"","category":"section"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"To install and develop, PandaModels from Git Bash:","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"Open Julia REPL in Git Bash:","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"$ julia","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"In Julia REPL, add the package:","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"import Pkg\n# add package\nPkg.add(\"PandaModels\")\n# develop-mode\nPkg.develop(\"PandaModels\")\nPkg.build(\"PandaModels\")\nPkg.resolve()","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"Check if your package is in develop mode:","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"import PandaModels\npathof(PandaModels)","category":"page"},{"location":"develop/#Python:","page":"Develop Mode","title":"Python:","text":"","category":"section"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"To install and develop, PandaModels directly from python:","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"before running the following codes please set the Julia/python interface by following the steps in here.","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"Call Julia in python:","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"# call julia\nimport julia\nfrom julia import Main\nfrom julia import Pkg\n# add package\nPkg.add(\"PandaModels\")\n# develop-mode\nPkg.develop(\"PandaModels\")\nPkg.build(\"PandaModels\")\nPkg.resolve()","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"Check if your package is in develop mode:","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"from julia import Base\nBase.find_package(\"PandaModels\")","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"warning: Julia Version\nPyJulia crashes on Julia new released version 1.6.0, please install the older versions.","category":"page"},{"location":"develop/#Dependencies","page":"Develop Mode","title":"Dependencies","text":"","category":"section"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"In develop-mode you need to add the following dependencies:","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"optimization environment:","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"JuMP.jl","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"infrastructure-based packages:","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"InfrastructureModels.jl\nPowerModels.jl","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"logger:","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"Memento.jl","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"i/o:","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"JSON.jl","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"solvers:","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"Ipopt.jl\nJuniper.jl\nCbc.jl","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"Open Julia REPL in Git Bash:","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"$ julia","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"In Julia REPL, add dependencies:","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"import Pkg\nPkg.Registry.update()\nPkg.add([\n    Pkg.PackageSpec(;name=\"JuMP\"),\n    Pkg.PackageSpec(;name=\"InfrastructureModels\"),\n    Pkg.PackageSpec(;name=\"PowerModels\"),\n    Pkg.PackageSpec(;name=\"PowerModelsDistribution\"),\n    Pkg.PackageSpec(;name=\"Memento\"),\n    Pkg.PackageSpec(;name=\"JSON\"),\n    Pkg.PackageSpec(;name=\"Ipopt\"),\n    Pkg.PackageSpec(;name=\"Juniper\"),\n    Pkg.PackageSpec(;name=\"Cbc\"),\n    ])\nPkg.build()\nPkg.resolve()","category":"page"},{"location":"develop/#Gurobi-Installation:","page":"Develop Mode","title":"Gurobi Installation:","text":"","category":"section"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"To use Gurobi, download and install from Gurobi Download Center, then get the license, activate it and add its path to the local PATH environment variables by following the steps from Gurobi License Center.","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"note: Linux Users\nfor linux users: open .bashrc file with , e.g., nano .bashrc in your home folder and add:export GUROBI_HOME=\"/opt/gurobi_VERSION/linux64\"\nexport PATH=\"${PATH}:${GUROBI_HOME}/bin\"\nexport LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:${GUROBI_HOME}/lib\"\nexport GRB_LICENSE_FILE=\"/PATH_TO_YOUR_LICENSE_DIR/gurobi.lic\"","category":"page"},{"location":"develop/","page":"Develop Mode","title":"Develop Mode","text":"Finally, add the package to Julia by following installation instructions from Gurobi.jl.","category":"page"},{"location":"model/#Optimization-Model","page":"Optimization Model Guidlines","title":"Optimization Model","text":"","category":"section"},{"location":"model/#Implement-New-optimization-Model","page":"Optimization Model Guidlines","title":"Implement New optimization Model","text":"","category":"section"},{"location":"model/","page":"Optimization Model Guidlines","title":"Optimization Model Guidlines","text":"To implement a new optimization model, at first, you need to introduce it in a new script in src/models directory as <your_model>.jl, for example, the optimization model for minimizing the voltage deviation is implemented in the vd.jl script.","category":"page"},{"location":"model/","page":"Optimization Model Guidlines","title":"Optimization Model Guidlines","text":"Please note that, every new model needs at least two functions:     1. The _run_<your_model> function which implicitly defines your model as an extension model in the PowerModels environment. This function must be exported by adding export _run_<your_model> at the beginning of <your_model>.jl script.     1. The _bulid_<your_model> function which defines your optimization model, in this function, you can directly use the pre-defined variable, constraint, and objective from PowerModels or customize them. For example, in the vd model, the variable and constraints are from PowerModels and the objective function is customized.","category":"page"},{"location":"model/","page":"Optimization Model Guidlines","title":"Optimization Model Guidlines","text":"note: Functions for Optimization Model\nany customized function for variable, constraint, and object should be placed in <your_model>.jl script.\nthe auxiliary functions should be defined in the input.jl or tools.jl in src/input directory.","category":"page"},{"location":"model/","page":"Optimization Model Guidlines","title":"Optimization Model Guidlines","text":"After defining the optimization model, you need to call your model by adding a new function run_pandamodels_<your_model> in src/call_pandamodels.jl. this function parses the JSON file of the pandapower net and based on the JSON file set the model and solver, then get the result by running your _run_<your_model> function.","category":"page"},{"location":"model/","page":"Optimization Model Guidlines","title":"Optimization Model Guidlines","text":"Finally, you need to add run_pandamodels_<your_model> function into export list and call the model by adding include(\"models/<your_model>.jl\") in before include(\"models/call_pandamodels.jl\") in PandaModels module in src/PandaModels.jl.","category":"page"},{"location":"model/#Application-of-New-optimization-Model-in-pandapower","page":"Optimization Model Guidlines","title":"Application of New optimization Model in pandapower","text":"","category":"section"},{"location":"model/","page":"Optimization Model Guidlines","title":"Optimization Model Guidlines","text":"Please check here to find out how call the new model in pandapower.","category":"page"},{"location":"test/#Test-Guidelines","page":"Add Test","title":"Test Guidelines","text":"","category":"section"},{"location":"test/#Test-PandaModels","page":"Add Test","title":"Test PandaModels","text":"","category":"section"},{"location":"test/","page":"Add Test","title":"Add Test","text":"Add the .json file of the pandapower net in data in test directory. Then, update the runtests.jl file, and add tests, at least, for the .json file, user defined parameters and termination status.","category":"page"},{"location":"test/#Test-pandapower","page":"Add Test","title":"Test pandapower","text":"","category":"section"},{"location":"test/","page":"Add Test","title":"Add Test","text":"All changes in PandaModels should be synced to pandapower. To test the changes, first checkout to develop branch in pandapower. Add the test for new function in pandapower, then in Python:","category":"page"},{"location":"test/","page":"Add Test","title":"Add Test","text":"import pandapower.test\npandapower.test.run_all_tests()","category":"page"},{"location":"pptutorial/#Run-Optimiyation-Problems-from-pandapower","page":"Optimazion Problems","title":"Run Optimiyation Problems from pandapower","text":"","category":"section"},{"location":"pptutorial/","page":"Optimazion Problems","title":"Optimazion Problems","text":"Now, by using PandaModels, pandapower has an interface to PowerModels.jl, also pandapower's users has access to some extra optimization models, e.g. voltage deviation minimization model, callable directly in pandapower.","category":"page"},{"location":"pptutorial/","page":"Optimazion Problems","title":"Optimazion Problems","text":"The tutorial for application of each optimization models are available in pandapower repository:","category":"page"},{"location":"pptutorial/","page":"Optimazion Problems","title":"Optimazion Problems","text":"Problems from PowerModels:","category":"page"},{"location":"pptutorial/","page":"Optimazion Problems","title":"Optimazion Problems","text":"Power Flow\nOptimal Power Flow\nOptimal Transmission Switching\nTransmission Network Expansion Planning","category":"page"},{"location":"pptutorial/","page":"Optimazion Problems","title":"Optimazion Problems","text":"Problems from PandaModels:","category":"page"},{"location":"pptutorial/","page":"Optimazion Problems","title":"Optimazion Problems","text":"Voltage Deviation","category":"page"},{"location":"#PandaModels.jl","page":"Home","title":"PandaModels.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PandaModels","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PandaModels.jl is a Julia package which containing supplementary data and codes to prepare pandapower networks in a compatible format for Julia packages which are based on InfrastructureModels, such as PowerModels.jl to run and calculate steady-state power network optimization. These packages use JuMP as optimization environment.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#Install-Julia","page":"Home","title":"Install Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you are not yet using Julia, install it. Note that you need a version that is supported PowerModels, PyCall and pyjulia for the interface to work. Currently, Julia 1.5  is the most recent stable version of Julia that supports all these packages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You don't necessarily need a Julia IDE if you are using PowerModels through pandapower, but it might help for debugging to install an IDE such as Juno. Also, PyCharm has a Julia Plugin.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Add the Julia binary folder (e.g. /Julia-1.5.0/bin) to the system variable PATH Providing the path is correct, you can now enter the Julia prompt by executing:","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ julia","category":"page"},{"location":"#Install-PyCall","page":"Home","title":"Install PyCall","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Julia package PyCall allows to call Python in Julia. By default, PyCall uses the Conda.jl package to install a Miniconda distribution private to Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"PyCall\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"To use an already installed Python distribution (e.g. Anaconda), set the PYTHON environment variable inside the Julia prompt to e.g.:","category":"page"},{"location":"","page":"Home","title":"Home","text":"ENV[\"PYTHON\"]=\"C:\\\\Anaconda3\\\\python.exe\"\nimport Pkg\nPkg.build(\"PyCall\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"test if calling Python from Julia works as described here.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you cannot plot using PyCall and PyPlot in Julia, see the workarounds offered here.","category":"page"},{"location":"#Install-PyJulia","page":"Home","title":"Install PyJulia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"At the moment only the pip package manager, not conda, is supported in Python to install the PyJulia package, the name of the PyJulia package in pip is Julia:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pip install julia","category":"page"},{"location":"#Install-Package","page":"Home","title":"Install Package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you want to use the PandaModels.jl package out of Python/pandapower environment, you can install is as a registered package by using the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"PandaModels\")\nPkg.build(\"PandaModels\")\nPkg.resolve()","category":"page"},{"location":"","page":"Home","title":"Home","text":"Otherwise, the package will be automatically installed in pandapower environment by applying the PyJulia-PyCall interface.","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package has been developed as part of the De­part­ment of En­er­gy Ma­nage­ment and Power Sys­tem Ope­ra­ti­on (e²n), University of Kassel and Fraunhofer Institute for Energy Economics and Energy System Technology (IEE).","category":"page"},{"location":"","page":"Home","title":"Home","text":"The developers thank Carleton Coffrin, the primary developer of PowerModels.jl, for his support.","category":"page"}]
}
